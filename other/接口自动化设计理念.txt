1.数据驱动
什么是户数驱动？
测试数据与测试执行逻辑（单元测试实例方法）分离
例子：对于注册或者登陆接口而言，每条用例之间只是测试数据不同，而测试执行逻辑往往一致（如何执行，如何断言都是相同的），
     可以基于数据驱动的思想将测试数据与测试执行逻辑分离从而提升自动化测试效率
2.分层设计
提升接口测试的拓展性、稳定性、完整性进而提升测试效率，往往将测试框架工程化，整个流程分为不同的层级
cases
测试执行逻辑层，用于存放测试用例类
configs
配置层，存放框架中的所有配置信息（使用频繁，修改不频繁的数据如yaml）
datas
测试数据层，用于存放所有的测试数据（excel、yaml、json）
libs
自定义文件层，用于存放自定义或者二次开发的库文件（HTMLTESTRUNNER、ddt）
logs
日志层，用于存放框架在运行过程中产生的日志信息
reports
报告层，用于存放脚本运行完成后生成的测试报告
scripts
脚本封装层，用于封装所有的操作封装模块（yaml、excel、log、pymlsql、request、参数化等）
run.py
启动文件，使用套件加载测试用例，批量执行生成测试报告
